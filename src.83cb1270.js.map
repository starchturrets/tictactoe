{"version":3,"sources":["ts/dom.ts","ts/game.ts","index.ts"],"names":[],"mappings":"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","file":"src.83cb1270.js","sourceRoot":"../src","sourcesContent":["import { Game } from './game';\n\nexport const $ = document.querySelector.bind(document);\nexport const $$ = document.querySelectorAll.bind(document);\n\nexport const h = (nodeName: string, attrs = {}, children: (Element | string)[] = []) => {\n  const $el: Element = Object.assign(document.createElement(nodeName), attrs);\n\n  children.forEach(child => {\n    if (typeof child === 'string') {\n      $el.appendChild(document.createTextNode(child));\n    } else {\n      $el.appendChild(child);\n    }\n  });\n  return $el;\n};\n\nexport class DOMstuff {\n  gameBoard: Element;\n\n  msgDiv: Element;\n\n  game: Game;\n\n  gameBoardChildren: NodeListOf<Element>;\n\n  constructor(game: Game) {\n    this.msgDiv = $('div.game-state')!;\n    this.game = game;\n    this.gameBoard = $('div.game-board')!;\n    this.gameBoardChildren = $$('div.game-board >div');\n  }\n\n  handleClick = ($ev: Event) => {\n    const $el = $ev.target as Element;\n    $el.removeEventListener('click', this.handleClick);\n\n    switch (true) {\n      case this.game.playerOneTurn && !this.game.isBoardFull(): {\n        $el.textContent = this.game.playerOne.letter;\n        this.game.updateState(this.gameBoardChildren);\n        $el.removeEventListener('click', this.handleClick);\n        break;\n      }\n      case !this.game.playerOneTurn && !this.game.isBoardFull(): {\n        $el.textContent = this.game.playerTwo.letter;\n        this.game.updateState(this.gameBoardChildren);\n        $el.removeEventListener('click', this.handleClick);\n\n        break;\n      }\n\n      default:\n        break;\n    }\n    this.game.playerOneTurn = !this.game.playerOneTurn;\n    this.msgDiv.textContent = this.game.playerOneTurn ? 'Player One Turn' : 'Player Two Turn';\n\n    if (!this.game.isGameWon() && this.game.isBoardFull()) {\n      this.disableListeners();\n      this.msgDiv.textContent = 'Draw';\n    } else if (this.game.isGameWon() === true) {\n      this.disableListeners();\n      this.msgDiv.textContent = `${this.game.winner} wins!`;\n      this.game.highlightedCells.forEach((index: number) => {\n        $(`div[data-index=\"${index}\"]`)!.classList.add('highlight');\n      });\n    }\n  };\n\n  enableListeners() {\n    [...this.gameBoardChildren]\n      .filter((el: Element) => el.textContent === '')\n      .forEach(($el: Element) => $el.addEventListener('click', this.handleClick));\n  }\n\n  disableListeners() {\n    this.gameBoardChildren.forEach(($el: Element) =>\n      $el.removeEventListener('click', this.handleClick),\n    );\n  }\n}\n\nexport class SingleDOM extends DOMstuff {\n  computerTurn = () => {\n    // this.checkForWinner();\n    this.game.playerOneTurn = false;\n    this.msgDiv.textContent = this.game.playerOneTurn\n      ? `${this.game.playerOne.name} turn`\n      : `${this.game.playerTwo.name} turn`;\n    const randomIndex = this.game.playerTwo.randomItem();\n    if (this.game.stateArray[randomIndex] !== '' && !this.game.isBoardFull()) {\n      this.computerTurn();\n    } else {\n      const $el: Element = $(`div[data-index=\"${randomIndex}\"]`)!;\n      $el.textContent = this.game.playerTwo.letter;\n      $el.removeEventListener('click', this.handleClick);\n      this.checkForWinner();\n    }\n  };\n\n  handleClick = ($ev: Event) => {\n    this.checkForWinner();\n    const $el = $ev.target as Element;\n\n    const won: boolean = this.game.isGameWon();\n    $el.removeEventListener('click', this.handleClick);\n\n    switch (true) {\n      case this.game.playerOneTurn && !this.game.isBoardFull() && won === false: {\n        $el.textContent = this.game.playerOne.letter;\n\n        this.game.updateState(this.gameBoardChildren);\n        $el.removeEventListener('click', this.handleClick);\n        this.disableListeners();\n        this.msgDiv.textContent = this.game.playerOneTurn\n          ? `${this.game.playerOne.name} turn`\n          : `${this.game.playerTwo.name} turn`;\n        setTimeout(() => {\n          if (this.game.isGameWon() === false) {\n            this.computerTurn();\n            this.game.playerOneTurn = true;\n            this.enableListeners();\n          }\n\n          // game.playerOneTurn = !game.playerOneTurn;\n        }, 500);\n\n        this.checkForWinner();\n        break;\n      }\n\n      default:\n        break;\n    }\n  };\n\n  checkForWinner = () => {\n    const won = this.game.isGameWon();\n    switch (true) {\n      case won === false && this.game.isBoardFull(): {\n        this.disableListeners();\n        this.msgDiv.textContent = 'Draw';\n        break;\n      }\n      case won === true: {\n        this.disableListeners();\n        this.msgDiv.textContent = `${this.game.winner} wins!`;\n        this.game.highlightedCells.forEach((index: number) => {\n          $(`div[data-index=\"${index}\"]`)!.classList.add('highlight');\n        });\n\n        break;\n      }\n      default:\n        break;\n    }\n  };\n}\n","export class Player {\n  letter: string;\n\n  name: string;\n\n  constructor(letter: string, name: string) {\n    this.letter = letter;\n    this.name = name;\n  }\n}\n\nexport class Computer extends Player {\n  randomItem = () => Math.floor(Math.random() * 8);\n}\nexport class Game {\n  // Handles game stuff\n  winner: string;\n\n  highlightedCells: number[];\n\n  stateArray: string[];\n\n  playerOne: any;\n\n  playerOneTurn: boolean = true;\n\n  playerTwo: any;\n\n  constructor(playerOneLetter: string, playerTwoLetter: string, singlePlayer: boolean) {\n    this.stateArray = ['', '', '', '', '', '', '', '', ''];\n    if (singlePlayer === false) {\n      this.playerOne = new Player(playerOneLetter, 'Player One');\n      this.playerTwo = new Player(playerTwoLetter, 'Player Two');\n    } else {\n      this.playerOne = new Player(playerOneLetter, 'Player');\n      this.playerTwo = new Computer(playerTwoLetter, 'Computer');\n    }\n    this.winner = '';\n    this.highlightedCells = [];\n  }\n\n  updateState = ($cells: NodeListOf<Element>) => {\n    $cells.forEach((item: Element, index: number) => {\n      this.stateArray[index] = item.textContent!;\n    });\n  };\n\n  isBoardFull = () => {\n    return this.stateArray.every((item: string) => item !== '');\n  };\n\n  isGameWon = () => {\n    const winningCombos: string[][] | number[][] = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    const checkArray = (array: number[] | string[]) =>\n      array.every((el: string | number) => el === array[0] && el);\n    for (const i in winningCombos) {\n      const [a, b, c] = winningCombos[i];\n      const sequence: string[] = [this.stateArray[a], this.stateArray[b], this.stateArray[c]];\n      if (checkArray(sequence) === true) {\n        this.highlightedCells = winningCombos[i];\n        if (sequence[0] === this.playerOne.letter) {\n          this.winner = this.playerOne.name;\n        } else if (sequence[0] === this.playerTwo.letter) {\n          this.winner = this.playerTwo.name;\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n}\n","import { h, SingleDOM, DOMstuff } from './ts/dom';\nimport { Game } from './ts/game';\n\nconst startGame = () => {\n  // Create and append modal\n  document.body.className = 'modal-open';\n  const btnSingle: Element = h('button', { className: 'btn-play-alone' }, ['Play Alone']);\n  const btnFriend: Element = h('button', { className: 'btn-play-multi' }, [`Play With A Friend`]);\n  const btnEnemy: Element = h('button', { className: 'btn-play-anyways' }, [`Play With An Enemy`]);\n  const h2: Element = h('h2', {}, ['How would you like to play?']);\n\n  const modal = h('div', { className: 'modal' }, [h2, btnSingle, btnFriend, btnEnemy]);\n\n  document.body.appendChild(modal);\n\n  const singlePlayer = () => {\n    // First, check which letter the player wants\n    h2.textContent = 'Would you like to be X or O?';\n    btnEnemy.remove();\n    btnFriend.remove();\n    btnSingle.remove();\n\n    const btnX = h('button', { className: 'btn-x' }, ['Play With X']);\n    const btnO = h('button', { className: 'btn-o' }, ['Play With O']);\n    modal.append(btnX, btnO);\n\n    // Then remove the modal and start a singleplayer game\n    btnX.addEventListener('click', () => {\n      modal.remove();\n      document.body.className = '';\n      const game = new Game('X', 'O', true);\n      const DOM = new SingleDOM(game);\n      DOM.enableListeners();\n    });\n    btnO.addEventListener('click', () => {\n      modal.remove();\n      document.body.className = '';\n      const game = new Game('O', 'X', true);\n      const DOM = new SingleDOM(game);\n      DOM.enableListeners();\n    });\n  };\n\n  const multiplayer = () => {\n    // Similar to multiplayer, check which letter the player wants\n    h2.textContent = 'Would you like to be X or O?';\n\n    btnEnemy.remove();\n    btnFriend.remove();\n    btnSingle.remove();\n\n    const btnX = h('button', { className: 'btn-x' }, ['Play With X']);\n    const btnO = h('button', { className: 'btn-o' }, ['Play With O']);\n    modal.append(btnX, btnO);\n    btnX.addEventListener('click', () => {\n      modal.remove();\n      document.body.className = '';\n      const game = new Game('X', 'O', false);\n      const DOM = new DOMstuff(game);\n      DOM.enableListeners();\n    });\n    btnO.addEventListener('click', () => {\n      modal.remove();\n      document.body.className = '';\n      const game = new Game('O', 'X', false);\n      const DOM = new DOMstuff(game);\n      DOM.enableListeners();\n    });\n  };\n  // Add Listeners\n  btnSingle.addEventListener('click', singlePlayer);\n  btnFriend.addEventListener('click', multiplayer);\n  btnEnemy.addEventListener('click', multiplayer);\n};\n\nstartGame();\n\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker\n    .register('sw.ts')\n    .then(reg => {\n      // registration worked\n      console.log(`Registration succeeded. Scope is ${reg.scope}`);\n    })\n    .catch(error => {\n      // registration failed\n      console.log(`Registration failed with ${error}`);\n    });\n}\n"]}